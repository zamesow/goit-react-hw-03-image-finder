{"version":3,"sources":["components/Modal/Modal.module.css","components/Loader/Loader.module.css","components/Button/Button.module.css","components/ImageGallery/ImageGallery.module.css","components/Loader/Loader.js","components/Button/Button.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/services/fetch-api.js","components/ImageInfo/ImageInfo.js","components/Searchbar/Searchbar.js","components/Modal/Modal.js","App.js","index.js","components/Searchbar/Searchbar.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css"],"names":["module","exports","LoaderSpinner","spinnerRoot","document","querySelector","createPortal","type","color","height","width","timeout","className","mc","Loader","Button","onClick","style","textAlign","ImageGalleryItem","photo","id","webformatURL","largeImageURL","src","alt","data-source","ImageGallery","photos","children","map","api","fetchPhotos","tagToSearch","page","fetch","then","res","ok","json","Promise","reject","Error","hits","ImageInfo","state","status","error","fetchSearch","setState","photoAPI","nextPhotos","console","log","length","alert","prevState","window","scrollTo","top","documentElement","scrollHeight","behavior","catch","message","prevProps","prevTag","tagToSearchProps","newTag","this","props","Component","Searchbar","handleTagChange","e","currentTarget","value","toLowerCase","handleSubmit","preventDefault","trim","onSubmit","SearchForm","autoComplete","autoFocus","placeholder","onChange","modalRoot","Modal","keyModalClose","code","onClose","mouseModalClose","target","addEventListener","removeEventListener","Overlay","App","onClickToSmallPicture","oldLargeURL","newLargeURL","dataset","source","closeModal","handleFormSubmit","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7bd8c834.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__2AxMb\",\"Modal\":\"Modal_Modal__2WBTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__17sQZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R1xi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__DncjJ\"};","import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport { createPortal } from 'react-dom';\nimport mc from './Loader.module.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport default function LoaderSpinner() {\n  const spinnerRoot = document.querySelector('#spinner-root');\n  return createPortal(\n    <Loader\n      type=\"ThreeDots\"\n      color=\"#3f51b5\"\n      height={50}\n      width={100}\n      timeout={5000}\n      className={mc.Loader}\n    />,\n    spinnerRoot,\n  );\n}\n","import React from 'react';\nimport mc from './Button.module.css';\n\nexport default function Button({ onClick }) {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <button onClick={onClick} className={mc.Button} type=\"button\">\n        Load more\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport mc from './ImageGalleryItem.module.css';\n\nexport default function ImageGalleryItem({ photo, onClick }) {\n  const { id, webformatURL, largeImageURL } = photo;\n\n  return (\n    <div>\n      <ul className={mc['ImageGalleryItem-container']}>\n        <li className={mc.ImageGalleryItem}>\n          <img\n            src={webformatURL}\n            alt={id}\n            className={mc['ImageGalleryItem-image']}\n            data-source={largeImageURL}\n            onClick={onClick}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  photo: PropTypes.object.isRequired,\n};\n\n// note 8. принимаем пропс и достаём из него нужные свойства\n// присваиваем данные src и alt\n","import ImageGalleryItem from '../ImageGalleryItem/';\nimport PropTypes from 'prop-types';\nimport mc from './ImageGallery.module.css';\n\nexport default function ImageGallery({ photos, children, onClick }) {\n  //   const index = photos.indexOf();\n  return (\n    <div>\n      <ul className={mc.ImageGallery}>\n        {photos.map(photo => (\n          <li key={photo.id}>\n            <ImageGalleryItem\n              photo={photo}\n              largeImageURL={photo.largeImageURL}\n              onClick={onClick}\n            />\n          </li>\n        ))}\n      </ul>\n      <div style={{ textAlign: 'center' }}>{children}</div>\n    </div>\n  );\n}\n\nImageGallery.propTypes = {\n  photos: PropTypes.array.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\n// note 7. принимаем наш массив\n// 'мапим его на части и возвращаем разметку из <ImageGalleryItem photo={photo} />\n// 'отправляем пропс с одной картинкой и её данными\n// 'для li необходим ключ\n","const fetchPhotos = (tagToSearch, page) => {\n  const apiKey = '18749198-d021e8b49b5886c25ed273569';\n\n  return fetch(\n    `https://pixabay.com/api/?q=${tagToSearch}&page=${page}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=12`,\n  )\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(\n        new Error(`По запросу ${tagToSearch} фото отсутствуют`),\n      );\n    })\n    .then(res => res.hits);\n};\n\nconst api = { fetchPhotos };\n\nexport default api;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoaderSpinner from '../Loader';\nimport Button from '../Button';\nimport ImageGallery from '../ImageGallery';\n\nimport photoAPI from '../services/fetch-api';\n\nexport default class ImageInfo extends Component {\n  state = {\n    photos: [],\n    tagToSearch: '',\n    status: 'idle',\n    error: null,\n    page: 1,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevTag = prevProps.tagToSearchProps;\n    const newTag = this.props.tagToSearchProps;\n\n    if (prevTag !== newTag) {\n      this.setState({ photos: [], tagToSearch: newTag, page: 1, error: null });\n    }\n\n    if (prevState.tagToSearch !== this.state.tagToSearch) {\n      this.fetchSearch();\n    }\n  }\n\n  fetchSearch = () => {\n    const { tagToSearch, page } = this.state;\n    this.setState({ status: 'pending' });\n\n    photoAPI\n      .fetchPhotos(tagToSearch, page)\n      .then(nextPhotos => {\n        console.log(nextPhotos);\n        if (nextPhotos.length === 0) {\n          return alert(`Sorry, but we don't find \"${tagToSearch}\"`);\n        }\n        this.setState(prevState => ({\n          photos: [...prevState.photos, ...nextPhotos],\n          status: 'resolved',\n          page: prevState.page + 1,\n        }));\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n      })\n      .catch(error =>\n        this.setState({ error: error.message, status: 'rejected' }),\n      );\n  };\n\n  render() {\n    const { status, photos, error } = this.state;\n    const { onClick } = this.props;\n    if (status === 'idle') {\n      return <h2 style={{ textAlign: 'center' }}>Let's search something?</h2>;\n    }\n\n    if (status === 'pending') {\n      return (\n        <>\n          <ImageGallery photos={photos} onClick={onClick}>\n            <LoaderSpinner />\n            {/* <h2 style={{ textAlign: 'center' }}>Download...</h2> */}\n          </ImageGallery>\n        </>\n      );\n    }\n\n    if (status === 'resolved') {\n      return (\n        <ImageGallery photos={photos} onClick={onClick}>\n          <Button onClick={this.fetchSearch} />\n        </ImageGallery>\n      );\n    }\n\n    if (status === 'rejected') {\n      return <h2 style={{ textAlign: 'center' }}>{error.message}</h2>;\n    }\n  }\n}\n\nImageInfo.propTypes = {\n  photos: PropTypes.array,\n  tagToSearch: PropTypes.string,\n  tagToSearchProps: PropTypes.string.isRequired,\n  page: PropTypes.number,\n  status: PropTypes.string,\n  error: PropTypes.string,\n};\n\n// вывод ошибки\n// модалка\n// хранить в state App largeImageUrl\n// onClick -> записть в стейтё\n// по результату стейта, если не пустая строка открывается модалка\n// ставим в модалку большое фото\n\n// note 4. Отправка запроса (каждый шаг проверяем с console.log)\n//  в стейт пишем свойство photos: null, для записи ответа от запроса\n// componentDidUpdate(prevProps, prevState) {}\n// обязательно наш запрос отправляем только при неравенстве if (prevTag !== newTag) {}\n// деструктуризируем prevTag и newTag из prevProps.имя и this.props.проп\n// пишем статус в стейт до запроса this.setState({ status: 'pending' });\n\n// note 5. проверка запроса fetch(`наш адрес`).then(res => res.json()).then(console.log);\n// 'проверка успешного запроса: .then(res => {if (res.ok) {return res.json();}...\n// 'возврат промиса в случае неуспешного: ...return Promise.reject(new Error(`По запросу ${newTag} фото отсутствуют`),);\n// ''записываем пришедший массив и успешный статус в стейт .then(photos => {this.setState({ photos, status: 'resolved' });})\n// '''ловим ошибку, записываем сообщение в стейт и меняем статус на неуспешный .catch(error => this.setState({ error, status: 'rejected' }));\n\n// note 5.1. res.массив\n// state = {photos = []} - null не работает с [...prevState.photos] в .then()\n// достаём массив из приходящего объекта: .then(res => res.hits)\n\n// note 6. рендер\n// 'рендерим при каждом статусе что-то своё: if (status === 'resolved') {}\n// 'при успехе рендерим нашу коллекцию фото и передаём в неё весь массив return <ImageGallery photos={photos} />;\n\n// перенесли fetch\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport mc from './Searchbar.module.css';\n\nexport default class Searchbar extends Component {\n  state = {\n    tagToSearch: '',\n  };\n\n  handleTagChange = e => {\n    this.setState({ tagToSearch: e.currentTarget.value.toLowerCase() });\n  };\n\n  handleSubmit = e => {\n    const { tagToSearch } = this.state;\n    e.preventDefault();\n\n    if (tagToSearch.trim() === '') {\n      return alert('You must write anything before submit!');\n    }\n\n    this.props.onSubmit(tagToSearch);\n\n    this.setState({ tagToSearch: '' });\n  };\n\n  render() {\n    const { tagToSearch } = this.state;\n\n    return (\n      <div>\n        <header className={mc.Searchbar}>\n          <form className={mc.SearchForm} onSubmit={this.handleSubmit}>\n            <button type=\"submit\" className={mc['SearchForm-button']}>\n              <span className={mc['SearchForm-button-label']}>Search</span>\n            </button>\n\n            <input\n              className={mc['SearchForm-input']}\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search images and photos\"\n              value={tagToSearch}\n              onChange={this.handleTagChange}\n            />\n          </form>\n        </header>\n      </div>\n    );\n  }\n}\n\nSearchbar.propTypes = {\n  tagToSearch: PropTypes.string,\n};\n\n// note 1. отображение вводимого значения\n// создаём имя tagToSearch: '' в state, для записи вводимого текста в форму\n// ф-цию handleTagChange для записи в стейт по событию (нажатия)\n// onChange={this.handleTagChange} связываем наше событие с ф-цией\n// value={tagToSearch} нужно для отображения текущего (начального) значения в форме\n\n// note 2. передача значения в стейт App по сабмиту\n// ф-ция handleSubmit по событию\n// запрет на обновление\n// паттерн на alert по вводу пустого значения\n// вызов пропса с передачей нашего тега this.props.onSubmit(this.state.tagToSearch)\n// очищаем форму после сабмита this.setState({ tagToSearch: '' });\n// вешаем в сабмит формы нашу ф-цию\n// принимаем компонент <Searcbar /> в App\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport mc from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.keyModalClose);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.keyModalClose);\n  }\n\n  keyModalClose = e => {\n    if (e.code === 'Escape') {\n      this.props.onClose();\n      console.log('Закрыли по Escape');\n    }\n  };\n\n  mouseModalClose = e => {\n    if (e.currentTarget === e.target) {\n      this.props.onClose();\n      console.log('Кликнули в бекдроп');\n    }\n  };\n\n  render() {\n    const { largeImageURL } = this.props;\n    console.log(`largeImageURL: ${largeImageURL}`);\n\n    return createPortal(\n      <div className={mc.Overlay} onClick={this.mouseModalClose}>\n        <div className={mc.Modal}>\n          <img src={largeImageURL} alt=\"largeImage\" height=\"600\" />\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n\n// note 10. Модалка компонент\n// управление в App\n// если в <div> будет {this.props.children}, то можно из любого места в модалку передавать всё, что угодно\n\n// Портал для модалки\n// index.html - \"modal-root\"\n// создаём ещё один корневой элемент и id к нему (элементов может быть много отдельных)\n// document.querySelector('#modal-root'), вне класса\n// import {createPortal} from 'react-dom';\n// рендерить нужно не ссылку, а результат вызова return createPortal()\n// внутри должна быть разметка и ссылка на modalRoot\n\n// Закрытие по клику на бекдроп\n// пишем ф-цию  на закрытие модалки: если тыкаем туда, где ловим (сравнение таргетов), то вызываем this.props.onClose() - этот пропс прописан в App и он вызывает toggleModal\n\n// Закрытие по кнопке\n// при монтировании (открытии) модалки вешаем слушатель на window на нажатие кнопки\n// пишем ф-цию: при событии, если код события Escape вызываем ф-цию закрытия модалки\n\n// Чистка\n// при размонтировании (закрытии) снимаем слушатель с окна\n","import React, { Component } from 'react';\nimport ImageInfo from './components/ImageInfo';\nimport Searchbar from './components/Searchbar';\nimport Modal from './components/Modal';\n\nimport './App.module.css';\n// import LoaderSpinner from './components/Loader';\n\nclass App extends Component {\n  state = {\n    tagToSearch: '',\n    largeImageURL: '',\n  };\n\n  onClickToSmallPicture = e => {\n    const oldLargeURL = this.state.largeImageURL;\n    const newLargeURL = e.target.dataset.source;\n\n    if (oldLargeURL !== newLargeURL) {\n      this.setState({ largeImageURL: newLargeURL });\n    }\n  };\n\n  closeModal = () => {\n    this.setState({ largeImageURL: '' });\n  };\n\n  // запись запроса в стейт\n  handleFormSubmit = tagToSearch => {\n    this.setState({ tagToSearch, status: 'resolved' });\n  };\n\n  render() {\n    const { tagToSearch, largeImageURL } = this.state;\n\n    return (\n      <>\n        <Searchbar onSubmit={this.handleFormSubmit} />\n        <ImageInfo\n          onClick={this.onClickToSmallPicture}\n          tagToSearchProps={tagToSearch}\n        />\n\n        {largeImageURL && (\n          <Modal onClose={this.closeModal} largeImageURL={largeImageURL} />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// добавить пропсы\n// сделать скелетон\n\n//  note 0. добавляем куда нужно стили и абсолютный экспорт\n\n// note 3. передача tagToSearch в стейт App\n// принимаем компонент <Searchbar />\n// передаём ему пропс c ссылкой на ф-цию handleFormSubmit с записью тега в стейт\n// создаём файл ImageInfo для запроса\n// передаём в него пропс с нашим записанным тегом tagToSearchProps={tagToSearch}\n\n// note 10.1. Модалка в App\n//  импортируем компонент Modal\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__DjWH3\",\"SearchForm\":\"Searchbar_SearchForm__1ac2l\",\"SearchForm-button\":\"Searchbar_SearchForm-button__3u-rY\",\"SearchForm-button-label\":\"Searchbar_SearchForm-button-label__2bzU3\",\"SearchForm-input\":\"Searchbar_SearchForm-input__j6qzO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__3CvRl\",\"ImageGalleryItem-container\":\"ImageGalleryItem_ImageGalleryItem-container__QJ2AN\",\"ImageGalleryItem-image\":\"ImageGalleryItem_ImageGalleryItem-image__1C-z-\"};"],"sourceRoot":""}